/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"CollaborationContract","structs":{},"methods":[{"name":"initialize","args":[{"type":"string","name":"brandName"},{"type":"string","name":"creatorName"},{"type":"string","name":"adminName"},{"type":"uint64","name":"contractPrice"},{"type":"string","name":"proposalText"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getDetails","args":[],"returns":{"type":"(string,string,string,uint64,string)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"brandName":{"keyType":"AVMString","valueType":"AVMString","key":"YnJhbmROYW1l"},"creatorName":{"keyType":"AVMString","valueType":"AVMString","key":"Y3JlYXRvck5hbWU="},"adminName":{"keyType":"AVMString","valueType":"AVMString","key":"YWRtaW5OYW1l"},"contractPrice":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y29udHJhY3RQcmljZQ=="},"proposalText":{"keyType":"AVMString","valueType":"AVMString","key":"cHJvcG9zYWxUZXh0"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[97,220],"errorMessage":"OnCompletion is not NoOp"},{"pc":[265],"errorMessage":"can only call when creating"},{"pc":[100,223],"errorMessage":"can only call when not creating"},{"pc":[296,300,304,308,313],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBQlicmFuZE5hbWULY3JlYXRvck5hbWUJYWRtaW5OYW1lDWNvbnRyYWN0UHJpY2UMcHJvcG9zYWxUZXh0MRtBALqCAgQxwk+kBFUFoDA2GgCOAgB9AAIiQzEZFEQxGESIAL1LBBUWVwYCTwVQSwQVFlcGAk8FUEsEFRZXBgJPBVBPBBZLBBUWVwYCTwVQSwQVgRAISRZXBgKAAgAQTFBLBRVPAghJFlcGAk8CTFBLBBVPAghMTwNQTBZXBgJQTwRQTwNQTwJQTFCABBUffHVMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgA2GgQXNhoFVwIAiAANI0MxGUD/VjEYFEQjQ4oFACiL+2cpi/xnKov9ZyuL/mcnBIv/Z4kiKGVEIillRCIqZUQiK2VEIicEZUSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the CollaborationContract contract
 */
export type CollaborationContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'initialize(string,string,string,uint64,string)void': {
      brandName: string
      creatorName: string
      adminName: string
      contractPrice: bigint | number
      proposalText: string
    }
    'getDetails()(string,string,string,uint64,string)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'initialize(string,string,string,uint64,string)void': [brandName: string, creatorName: string, adminName: string, contractPrice: bigint | number, proposalText: string]
    'getDetails()(string,string,string,uint64,string)': []
  }
}

/**
 * The return type for each method
 */
export type CollaborationContractReturns = {
  'initialize(string,string,string,uint64,string)void': void
  'getDetails()(string,string,string,uint64,string)': [string, string, string, bigint, string]
}

/**
 * Defines the types of available calls and state of the CollaborationContract smart contract.
 */
export type CollaborationContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initialize(string,string,string,uint64,string)void' | 'initialize', {
      argsObj: CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void']
      argsTuple: CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']
      returns: CollaborationContractReturns['initialize(string,string,string,uint64,string)void']
    }>
    & Record<'getDetails()(string,string,string,uint64,string)' | 'getDetails', {
      argsObj: CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)']
      argsTuple: CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']
      returns: CollaborationContractReturns['getDetails()(string,string,string,uint64,string)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        brandName: string
        creatorName: string
        adminName: string
        contractPrice: bigint
        proposalText: string
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type CollaborationContractSignatures = keyof CollaborationContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type CollaborationContractNonVoidMethodSignatures = keyof CollaborationContractTypes['methods'] extends infer T ? T extends keyof CollaborationContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the CollaborationContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends CollaborationContractSignatures> = CollaborationContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CollaborationContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CollaborationContractSignatures> = CollaborationContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = CollaborationContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type CollaborationContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type CollaborationContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: CollaborationContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the CollaborationContract smart contract
 */
export abstract class CollaborationContractParamsFactory {
  /**
   * Constructs a no op call for the initialize(string,string,string,uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(string,string,string,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.brandName, params.args.creatorName, params.args.adminName, params.args.contractPrice, params.args.proposalText],
    }
  }
  /**
   * Constructs a no op call for the getDetails()(string,string,string,uint64,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getDetails(params: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getDetails()(string,string,string,uint64,string)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the CollaborationContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class CollaborationContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `CollaborationContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new CollaborationContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new CollaborationContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the CollaborationContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: CollaborationContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new CollaborationContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CollaborationContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CollaborationContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the CollaborationContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new CollaborationContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the CollaborationContract smart contract
 */
export class CollaborationContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `CollaborationContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the CollaborationContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `CollaborationContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends CollaborationContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `CollaborationContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<CollaborationContractClient> {
    return new CollaborationContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `CollaborationContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<CollaborationContractClient> {
    return new CollaborationContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the CollaborationContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `initialize(string,string,string,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(CollaborationContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `getDetails()(string,string,string,uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getDetails: (params: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(CollaborationContractParamsFactory.getDetails(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the CollaborationContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `initialize(string,string,string,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(CollaborationContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `getDetails()(string,string,string,uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getDetails: (params: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(CollaborationContractParamsFactory.getDetails(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the CollaborationContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `initialize(string,string,string,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(CollaborationContractParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | CollaborationContractReturns['initialize(string,string,string,uint64,string)void'])}
    },

    /**
     * Makes a call to the CollaborationContract smart contract using the `getDetails()(string,string,string,uint64,string)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getDetails: async (params: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(CollaborationContractParamsFactory.getDetails(params))
      return {...result, return: result.return as unknown as (undefined | CollaborationContractReturns['getDetails()(string,string,string,uint64,string)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new CollaborationContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current CollaborationContract app
   */
  state = {
    /**
     * Methods to access global state for the current CollaborationContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          brandName: result.brandName,
          creatorName: result.creatorName,
          adminName: result.adminName,
          contractPrice: result.contractPrice,
          proposalText: result.proposalText,
        }
      },
      /**
       * Get the current value of the brandName key in global state
       */
      brandName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("brandName")) as string | undefined },
      /**
       * Get the current value of the creatorName key in global state
       */
      creatorName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorName")) as string | undefined },
      /**
       * Get the current value of the adminName key in global state
       */
      adminName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("adminName")) as string | undefined },
      /**
       * Get the current value of the contractPrice key in global state
       */
      contractPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("contractPrice")) as bigint | undefined },
      /**
       * Get the current value of the proposalText key in global state
       */
      proposalText: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("proposalText")) as string | undefined },
    },
  }

  public newGroup(): CollaborationContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a initialize(string,string,string,uint64,string)void method call against the CollaborationContract contract
       */
      initialize(params: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getDetails()(string,string,string,uint64,string) method call against the CollaborationContract contract
       */
      getDetails(params: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getDetails(params)))
        resultMappers.push((v) => client.decodeReturnValue('getDetails()(string,string,string,uint64,string)', v))
        return this
      },
      /**
       * Add a clear state call to the CollaborationContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as CollaborationContractComposer
  }
}
export type CollaborationContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initialize(string,string,string,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<CollaborationContractArgs['obj']['initialize(string,string,string,uint64,string)void'] | CollaborationContractArgs['tuple']['initialize(string,string,string,uint64,string)void']>): CollaborationContractComposer<[...TReturns, CollaborationContractReturns['initialize(string,string,string,uint64,string)void'] | undefined]>

  /**
   * Calls the getDetails()(string,string,string,uint64,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getDetails(params?: CallParams<CollaborationContractArgs['obj']['getDetails()(string,string,string,uint64,string)'] | CollaborationContractArgs['tuple']['getDetails()(string,string,string,uint64,string)']>): CollaborationContractComposer<[...TReturns, CollaborationContractReturns['getDetails()(string,string,string,uint64,string)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the CollaborationContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): CollaborationContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): CollaborationContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<CollaborationContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<CollaborationContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<CollaborationContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<CollaborationContractComposerResults<TReturns>>
}
export type CollaborationContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


{
  "version": 3,
  "sources": [
    "/home/aldols/algorand/contract_algo/projects/contract_algo/smart_contracts/contract_algo/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAsBG;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAPH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAOG;;;AAAA;;AAPH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAOE;;;AANA;AAcE;;AAAA;AAbF;AAcE;;AAAA;AAbF;AAcE;;AAAA;AAbF;AAcE;;AAAA;AAbF;;AAcE;;AAAA;;AAlBF;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAmBE",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"brandName\" \"creatorName\" \"adminName\" \"contractPrice\" \"proposalText\""
    },
    "66": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "68": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "71": {
      "op": "pushbytess 0x31c24fa4 0x5505a030 // method \"initialize(string,string,string,uint64,string)void\", method \"getDetails()(string,string,string,uint64,string)\"",
      "defined_out": [
        "Method(getDetails()(string,string,string,uint64,string))",
        "Method(initialize(string,string,string,uint64,string)void)"
      ],
      "stack_out": [
        "Method(initialize(string,string,string,uint64,string)void)",
        "Method(getDetails()(string,string,string,uint64,string))"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(getDetails()(string,string,string,uint64,string))",
        "Method(initialize(string,string,string,uint64,string)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(string,string,string,uint64,string)void)",
        "Method(getDetails()(string,string,string,uint64,string))",
        "tmp%2#0"
      ]
    },
    "86": {
      "op": "match main_initialize_route@3 main_getDetails_route@4",
      "stack_out": []
    },
    "92": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "93": {
      "op": "return",
      "stack_out": []
    },
    "94": {
      "block": "main_getDetails_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "96": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "97": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "98": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "100": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "101": {
      "callsub": "smart_contracts/contract_algo/contract.algo.ts::CollaborationContract.getDetails",
      "op": "callsub getDetails",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "104": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%0#0 (copy)",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0 (copy)"
      ]
    },
    "106": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "length%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "length%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "as_bytes%0#0"
      ]
    },
    "108": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "length_uint16%0#0"
      ]
    },
    "111": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "length_uint16%0#0",
        "elements_to_encode%0#0"
      ]
    },
    "113": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ]
    },
    "114": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%1#0 (copy)",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "elements_to_encode%1#0 (copy)"
      ]
    },
    "116": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "length%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "118": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "121": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "elements_to_encode%1#0"
      ]
    },
    "123": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "124": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%2#0 (copy)",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "elements_to_encode%2#0 (copy)"
      ]
    },
    "126": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0"
      ]
    },
    "127": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "as_bytes%2#0"
      ]
    },
    "128": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0"
      ]
    },
    "131": {
      "op": "uncover 5",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "133": {
      "op": "concat",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "134": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "elements_to_encode%3#0"
      ]
    },
    "136": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "137": {
      "op": "dig 4",
      "defined_out": [
        "elements_to_encode%4#0",
        "elements_to_encode%4#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "elements_to_encode%4#0 (copy)"
      ]
    },
    "139": {
      "op": "len",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "length%3#0"
      ]
    },
    "140": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "as_bytes%3#0"
      ]
    },
    "141": {
      "op": "extract 6 2",
      "defined_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "length_uint16%3#0"
      ]
    },
    "144": {
      "op": "uncover 5",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "length_uint16%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0"
      ]
    },
    "147": {
      "op": "dig 4",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "149": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "data_length%0#0"
      ]
    },
    "150": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "data_length%0#0",
        "16"
      ]
    },
    "152": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0"
      ]
    },
    "153": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "154": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "as_bytes%5#0"
      ]
    },
    "155": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "158": {
      "op": "pushbytes 0x0010",
      "defined_out": [
        "0x0010",
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "0x0010"
      ]
    },
    "162": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "0x0010",
        "offset_as_uint16%1#0"
      ]
    },
    "163": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "164": {
      "op": "dig 5",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "166": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0"
      ]
    },
    "167": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%2#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "169": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "170": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "171": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "as_bytes%6#0"
      ]
    },
    "172": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%2#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%2#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "175": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "177": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "178": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "179": {
      "op": "dig 4",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "181": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%3#0",
        "data_length%2#0"
      ]
    },
    "182": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%3#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "184": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%3#0",
        "current_tail_offset%3#0"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "val_as_bytes%0#0",
        "encoded_value%3#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "186": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%0#0"
      ]
    },
    "188": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "189": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%3#0"
      ]
    },
    "190": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "as_bytes%7#0"
      ]
    },
    "191": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%3#0"
      ]
    },
    "194": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "195": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "197": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "198": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%1#0"
      ]
    },
    "200": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "201": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%7#0",
        "encoded_value%2#0"
      ]
    },
    "203": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%3#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0"
      ]
    },
    "206": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%9#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%9#0",
        "0x151f7c75"
      ]
    },
    "212": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "213": {
      "op": "concat",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "214": {
      "op": "log",
      "stack_out": []
    },
    "215": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "216": {
      "op": "return",
      "stack_out": []
    },
    "217": {
      "block": "main_initialize_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "219": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "220": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "221": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "223": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "224": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "227": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "230": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "233": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "236": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "239": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "242": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "245": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "249": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "252": {
      "callsub": "smart_contracts/contract_algo/contract.algo.ts::CollaborationContract.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "255": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "256": {
      "op": "return",
      "stack_out": []
    },
    "257": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "259": {
      "op": "bnz main_after_if_else@11",
      "stack_out": []
    },
    "262": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "264": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "265": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "266": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "267": {
      "op": "return",
      "stack_out": []
    },
    "268": {
      "subroutine": "smart_contracts/contract_algo/contract.algo.ts::CollaborationContract.initialize",
      "params": {
        "brandName#0": "bytes",
        "creatorName#0": "bytes",
        "adminName#0": "bytes",
        "contractPrice#0": "uint64",
        "proposalText#0": "bytes"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "271": {
      "op": "bytec_0 // \"brandName\"",
      "defined_out": [
        "\"brandName\""
      ],
      "stack_out": [
        "\"brandName\""
      ]
    },
    "272": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"brandName\"",
        "brandName#0 (copy)"
      ],
      "stack_out": [
        "\"brandName\"",
        "brandName#0 (copy)"
      ]
    },
    "274": {
      "op": "app_global_put",
      "stack_out": []
    },
    "275": {
      "op": "bytec_1 // \"creatorName\"",
      "defined_out": [
        "\"creatorName\""
      ],
      "stack_out": [
        "\"creatorName\""
      ]
    },
    "276": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"creatorName\"",
        "creatorName#0 (copy)"
      ],
      "stack_out": [
        "\"creatorName\"",
        "creatorName#0 (copy)"
      ]
    },
    "278": {
      "op": "app_global_put",
      "stack_out": []
    },
    "279": {
      "op": "bytec_2 // \"adminName\"",
      "defined_out": [
        "\"adminName\""
      ],
      "stack_out": [
        "\"adminName\""
      ]
    },
    "280": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"adminName\"",
        "adminName#0 (copy)"
      ],
      "stack_out": [
        "\"adminName\"",
        "adminName#0 (copy)"
      ]
    },
    "282": {
      "op": "app_global_put",
      "stack_out": []
    },
    "283": {
      "op": "bytec_3 // \"contractPrice\"",
      "defined_out": [
        "\"contractPrice\""
      ],
      "stack_out": [
        "\"contractPrice\""
      ]
    },
    "284": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"contractPrice\"",
        "contractPrice#0 (copy)"
      ],
      "stack_out": [
        "\"contractPrice\"",
        "contractPrice#0 (copy)"
      ]
    },
    "286": {
      "op": "app_global_put",
      "stack_out": []
    },
    "287": {
      "op": "bytec 4 // \"proposalText\"",
      "defined_out": [
        "\"proposalText\""
      ],
      "stack_out": [
        "\"proposalText\""
      ]
    },
    "289": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"proposalText\"",
        "proposalText#0 (copy)"
      ],
      "stack_out": [
        "\"proposalText\"",
        "proposalText#0 (copy)"
      ]
    },
    "291": {
      "op": "app_global_put",
      "stack_out": []
    },
    "292": {
      "retsub": true,
      "op": "retsub"
    },
    "293": {
      "subroutine": "smart_contracts/contract_algo/contract.algo.ts::CollaborationContract.getDetails",
      "params": {},
      "block": "getDetails",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "294": {
      "op": "bytec_0 // \"brandName\"",
      "defined_out": [
        "\"brandName\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"brandName\""
      ]
    },
    "295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "298": {
      "op": "bytec_1 // \"creatorName\"",
      "defined_out": [
        "\"creatorName\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"creatorName\""
      ]
    },
    "299": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "300": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "302": {
      "op": "bytec_2 // \"adminName\"",
      "defined_out": [
        "\"adminName\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"adminName\""
      ]
    },
    "303": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "304": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "305": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "306": {
      "op": "bytec_3 // \"contractPrice\"",
      "defined_out": [
        "\"contractPrice\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"contractPrice\""
      ]
    },
    "307": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "308": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "309": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "310": {
      "op": "bytec 4 // \"proposalText\"",
      "defined_out": [
        "\"proposalText\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"proposalText\""
      ]
    },
    "312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "313": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "314": {
      "retsub": true,
      "op": "retsub"
    }
  }
}